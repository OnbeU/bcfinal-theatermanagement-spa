name: Production_Deployment
on:
  # # Trigger the workflow on push
  # # but only for the main branch
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

env:
  APP_NAME: theatermanagement-spa
  ACR_HELM_REPO_NAME: helm/apptemplate
  ACR_HELM_CHART_NAME: apptemplate
  BFF: theatermanagement-bff
jobs:
  build:
    name: Deployment to Production
    runs-on: ubuntu-latest

    steps:
     # checkout the repo
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v2
    - name: 'generate version tags'
      id: vars
      run: |
         echo ::set-output name=url_tag::production-${{ env.APP_NAME }}-${{secrets.TEAM_NAME}}
         echo ::set-output name=pr_url::production-${{ env.APP_NAME }}-${{secrets.TEAM_NAME}}.${{secrets.HOST_URL}}
         echo ::set-output name=pr_api_url::production-${{ env.BFF }}-${{secrets.TEAM_NAME}}.${{secrets.HOST_URL}}
         echo ::set-output name=random_tag_suffix::$(git rev-parse --short=7 ${{ github.sha }})-$RANDOM


    - name: 'echo version tags'
      id: echovars
      run: |
         echo  URL TAG -${{steps.vars.outputs.url_tag}}
         echo  PR URL-${{steps.vars.outputs.pr_url}}
         echo  random tag suffix-${{steps.vars.outputs.random_tag_suffix}}

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Docker Login to Registry'
      uses: azure/docker-login@v1
      with:
       login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
       username: ${{ secrets.REGISTRY_USERNAME }}
       password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Updating BFF Url
      run: |
       echo "`jq '.apiBaseUrl="https://${{ steps.vars.outputs.pr_api_url }}"' src/assets/config.json`" > src/assets/config.json
       echo "`jq '.envName="Production"' src/assets/config.json`" > src/assets/config.json
       echo "`jq '.production=true' src/assets/config.json`" > src/assets/config.json

    - name: Build Docker Image
      run: |
       docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/production/${{env.APP_NAME}}:${{ github.sha }}
       docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/production/${{env.APP_NAME}}:${{ github.sha }}

    - name: 'Publish App Image to ACR'
      uses: 'azure/aci-deploy@v1'
      with:
       resource-group: ${{ secrets.ACR_RESOURCE_GROUP }}
       dns-name-label: ${{ secrets.ACR_RESOURCE_GROUP }}${{ github.run_number }}
       image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/production/${{env.APP_NAME}}:${{ github.sha }}
       registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
       registry-username: ${{ secrets.REGISTRY_USERNAME }}
       registry-password: ${{ secrets.REGISTRY_PASSWORD }}
       name: aci-${{env.APP_NAME}}-${{steps.vars.outputs.random_tag_suffix}}
       location: 'West US 2'

    - name: Pull HELM chart
      run: |
         export HELM_EXPERIMENTAL_OCI=1
         echo '${{ secrets.REGISTRY_PASSWORD }}' | helm registry login ${{ secrets.REGISTRY_LOGIN_SERVER }} --username ${{ secrets.REGISTRY_USERNAME }} --password-stdin
         helm chart pull ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_HELM_REPO_NAME }}:latest
         helm chart export ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_HELM_REPO_NAME }}:latest

    - name: Login to AKS
      run: |
          az aks get-credentials -n ${{ secrets.AKS_NAME }} -g ${{ secrets.AKS_RESOURCE_GROUP }} --admin

    - name: publish Frontend App to AKS
      run: |
         helm upgrade ${{ steps.vars.outputs.url_tag }} ./${{env.ACR_HELM_CHART_NAME}} \
           --namespace ${{ steps.vars.outputs.url_tag }} \
           --create-namespace \
           --install \
           --wait \
           --set image.repository=${{ secrets.REGISTRY_LOGIN_SERVER }}/production/${{env.APP_NAME}} \
           --set nameOverride=${{env.APP_NAME}} \
           --set image.tag=${{ github.sha }} \
           --set replicaCount=1  \
           --set ingress.hosts[0].host=${{ steps.vars.outputs.pr_url }}  \
           --set ingress.hosts[0].paths[0].path=/  \
           --set ingress.hosts[0].paths[0].pathType=Prefix \
           --set ingress.tls[0].hosts[0]=${{ steps.vars.outputs.pr_url }}  \
           --set ingress.tls[0].secretName=tls-secret \
           --set ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
           --set ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt-production \
           --set ingress.annotations."nginx\.ingress\.kubernetes\.io/rewrite-target"=$1 \
           --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/use-regex"="true" \
           --set livenessProbe.path=/\ \
           --set readinessProbe.path=/\ \


